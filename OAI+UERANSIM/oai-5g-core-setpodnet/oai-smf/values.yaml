kubernetesDistribution: Vanilla  #Vanilla for community kubernetes distribution else Openshift for Openshift

## In case of using these charts on Openshift then please use UBI images
## To know more about them follow this tutorial https://gitlab.eurecom.fr/oai/cn5g/oai-cn5g-fed/-/tree/master/openshift
nfimage:
  repository: docker.io/oaisoftwarealliance/oai-smf  #docker.io/oaisoftwarealliance/oai-smf          # dockerhub oaisoftwarealliance/oai-smf
  version: v2.1.0  #image tag, develop tag for experimental features 
  #pullPolicy: IfNotPresent or Never or Always
  pullPolicy: IfNotPresent

# good to use when pulling images from docker-hub mention for RHEL images it can be commented
# imagePullSecrets: 
#   - name: "regcred"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "oai-smf-sa"

podSecurityContext:
  runAsUser: 0
  runAsGroup: 0

#service type is fixed to clusterIP, it is only support for non multus interface (eth0)
exposedPorts:
  sbi: 80
  n4: 8805

# SMF needs two separate interface one for http and other one for N4 to communicate with UPD. 
# But for experimentation only one interface can be used. 
# When you need multus:
# 1. you want separate interface for N4 and Nsmf 
# 2. Your UPF is outside the cluster and the host machine can communicate but pods can not then you can provide ip-address in the same range as your host machine
# 3. You want static ip-address for N4 interface, Namf can be discovered by its service name

## Change these ip-addresses according to your environment
multus:
  ## If you don't want to add a default route in your pod then leave this field empty
  defaultGateway: ""
  n4Interface:
    create: false
    ipAdd: "192.168.24.3"
    netmask: "24"
    #name inside the pod is hardcoded right now
    #name: "n4"
    ## If you do not have a gateway leave the field empty
    gateway: ""
    ## If you do not want to add any routes in your pod then leave this field empty
    #routes: [{'dst': '10.8.0.0/24','gw': '192.168.24.254'}, {'dst': '10.9.0.0/24','gw': '192.168.24.254'}]
    hostInterface: "bond0"

## Debugging section
start:
  smf: true #If false the network function container will run in sleep mode for manually testing
  tcpdump: false

includeTcpDumpContainer: false #If true it will add a tcpdump container inside network function pod for debugging

tcpdumpimage:
  repository: docker.io/oaisoftwarealliance/oai-tcpdump-init
  version: alpine-3.20
  #pullPolicy: IfNotPresent or Never or Always
  pullPolicy: IfNotPresent

#To store PCAP of NF in a sharedVolume so it can be easily fetched (PVC is created with NRF charts so make sure in NRF it is true)
persistent:
   sharedvolume: false

## NF is the network function and tcpdump is the tcpdump container. 
## To know more about request and limit it is better to understand that how Kubernetes QoS works. 
## https://kubernetes.io/docs/concepts/configuration/manage-resources-containers
## https://kubernetes.io/docs/concepts/workloads/pods/pod-qos
resources:
  define: false
  limits:
    nf:
      cpu: 100m
      memory: 128Mi
    #If tcpdump container is disabled this value will not be used
    tcpdump:
      cpu: 100m
      memory: 128Mi
  requests:
    nf:
      cpu: 100m
      memory: 128Mi
    #If tcpdump container is disabled this value will not be used
    tcpdump:
      cpu: 100m
      memory: 128Mi

readinessProbe: true

livenessProbe: false

terminationGracePeriodSeconds: 5

nodeSelector: {}
schedulerName: setpodnet-scheduler
id: "1" 
app_ad: "2" #Slice differentiator
nb_pods: "10"

#nodeSelector:
  #site: grenoble

nodeName:
