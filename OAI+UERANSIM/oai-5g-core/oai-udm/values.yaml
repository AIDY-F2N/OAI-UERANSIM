kubernetesType: Vanilla  #Vanilla for community kubernetes distribution else Openshift for Openshift

## In case of using these charts on Openshift then please use UBI images
## To know more about them follow this tutorial https://gitlab.eurecom.fr/oai/cn5g/oai-cn5g-fed/-/tree/master/openshift
nfimage:
  repository: docker.io/oaisoftwarealliance/oai-udm         
  version: develop                        #image tag, develop tag for experimental features 
  #pullPolicy: IfNotPresent or Never or Always
  pullPolicy: IfNotPresent

## good to use when pulling images from docker-hub mention 
imagePullSecrets: 
  - name: "regcred"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "oai-udm-sa"

podSecurityContext:
  runAsUser: 0
  runAsGroup: 0

#service type is fixed to clusterIP, it is only support for non multus interface (eth0)

config:
  tz: "Europe/Paris"
  instance: 0
  pidDirectory: "/var/run"
  udmName: "oai-udm"
  logLevel: "debug"
  sbiIfName: "eth0"
  sbiPortHttp1: "80"
  sbiPortHttp2: "8080"
  udmApiVersionNb: "v1"
  useFqdnDns: "yes"       #yes to enable FQDN resoultion instead of ip-addresses but we still need to put some dummy ip-address in Ip-address field 
  nfRegistration: "no"    #yes to register to NRF
  useHttp2: "no"          #yes to enable http2
  udrIpAddress: "127.0.0.1"
  udrPort: "80"
  udrApiVersionNb: "v1"   #Nb means northbound
  udrFqdn: "oai-udr-svc"
  nrfIpAddress: "127.0.0.1"
  nrfPort: "80"
  nrfApiVersionNb: "v1"   #Nb means northbound
  nrfFqdn: "oai-nrf-svc"

## Debugging section
start:
  udm: true #If false the network function container will run in sleep mode for manually testing
  tcpdump: false

includeTcpDumpContainer: false #If true it will add a tcpdump container inside network function pod for debugging

## For openshift you can use rhel8/support-tools:8.7-13
tcpdumpimage:
   repository: docker.io/corfr/tcpdump
   version: latest
   #pullPolicy: IfNotPresent or Never or Always
   pullPolicy: IfNotPresent

#To store PCAP of NF in a sharedVolume so it can be easily fetched (PVC is created with NRF charts so make sure in NRF it is true)
persistent:
  sharedvolume: false

## NF is the network function and tcpdump is the tcpdump container. 
## To know more about request and limit it is better to understand that how Kubernetes QoS works. 
## https://kubernetes.io/docs/concepts/configuration/manage-resources-containers
## https://kubernetes.io/docs/concepts/workloads/pods/pod-qos

resources:
  define: true
  limits:
    tcpdump:
      cpu: 200m
      memory: 256Mi
    nf:
      cpu: 200m
      memory: 256Mi
  requests:
    tcpdump:
      cpu: 200m
      memory: 256Mi
    nf:
      cpu: 200m
      memory: 256Mi

readinessProbe: true

livenessProbe: false

terminationGracePeriodSeconds: 5

nodeName:
