kubernetesType: Vanilla  #Vanilla for community kubernetes distribution else Openshift for Openshift

## In case of using these charts on Openshift then please use UBI images
## To know more about them follow this tutorial https://gitlab.eurecom.fr/oai/cn5g/oai-cn5g-fed/-/tree/master/openshift
nfimage:  # image name either locally present or in a public/private repository
  repository: docker.io/oaisoftwarealliance/oai-amf           ## The image will be pulled from dockerhub
  version: develop                                   #image tag, develop tag for experimental features 
  # pullPolicy: IfNotPresent or Never or Always
  pullPolicy: IfNotPresent

## good to use when pulling images from docker-hub mention 
imagePullSecrets:
  - name: "regcred"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  name: "oai-amf-sa"

#service type is fixed to clusterIP, it is only support for non multus interface (eth0)
podSecurityContext:
  runAsUser: 0
  runAsGroup: 0

# AMF needs two seperate interface one for http (for SBI) and other one for SCTP (N1/N2) to communicate with gNB. 
# But for experimentation only one interface can be used. 
# When you need multus:
# 1. you want seperate interface for N1/N2 and Namf 
# 2. Your gnB is outside the cluster and the host machine can communicate but pods can not then you can provide ip-address in the same range as your host machine
# 3. You want static ip-address for N1/N2 interface, Namf can be discovered by its service name

## Change these ip-addresses according to your environment
multus:
  ## If you don't want to add a default route in your pod then leave this field empty
  defaultGateway: "172.21.7.254"
  n2Interface:
    create: false
    Ipadd: "172.21.6.94"
    Netmask: "22"
    ## If you do not have a gateway leave the field empty
    Gateway:
    ## If you do not want to add any routes in your pod then leave this field empty
    routes: [{'dst': '10.8.0.0/24','gw': '172.21.7.254'}]
    hostInterface: "bond0" # Interface of the host machine on which this pod will be scheduled

## Incase the pod is not able to resolve the FQDN of other network 
## functions example nrf then you can disable useFqdnDns feature this way AMF will talk to other network functions using their ip-address. 

config:
  logLevel: "debug" #info/debug/error
  amfInterfaceNameForNGAP: "eth0" # If multus.n2Interface.create is true then n2 else eth0
  amfInterfaceNameForSBI: "eth0"  # Service based interface
  amfInterfaceSBIHTTPPort: 80  # Service based interface
  amfInterfaceSBIHTTP2Port: 8080  # Service based interface
  mcc: "001"
  mnc: "01"
  regionId: "128"
  amfSetId: "1"
  tac: "0x0001"
  sst0: "1"         ## 1 slice/SST is mandatory
  sd0: "0xFFFFFF"   ## Optional 0xFFFFFF means no SD as per 3GPP
  ## Can add upto 3 more slices. More than that you can do it in the configmap of amf templates/configmap.yaml
  # Note only SST is mandatory for a slice SD is optional
  sst1: "1"
  sd1: "1"
  smfFqdn: "oai-smf-svc"     # amf communicates using FQDN/Service Name
  nrfFqdn: "oai-nrf-svc"     # amf communicates using FQDN/Service Name
  ausfFqdn: "oai-ausf-svc"   #only needed if ausf is used and externalAusf is true else internal ausf will be used
  nfRegistration: "yes"
  nrfSelection: "no"
  smfSelection: "yes"
  externalAusf: "yes"         #Ausf will be used instead of using internal AUSF for mini deployment
  externalUdm: "no"
  externalNrf: "no"
  externalNssf: "no"
  useHttp2: "no"
  intAlgoList: '[ "NIA1" , "NIA1" , "NIA2" ]'
  ciphAlgoList: '[ "NEA0" , "NEA1" , "NEA2" ]'
  mySqlServer: "mysql" # OPTIONAL: used only if not using AUSF
  mySqlUser: "root" # OPTIONAL: used only if not using AUSF
  mySqlPass: "linux" # OPTIONAL: used only if not using AUSF
  mySqlDb: "oai_db" # OPTIONAL: used only if not using AUSF

## Debugging section
start:
  amf: true #If false the network function container will run in sleep mode for manually testing
  tcpdump: false

includeTcpDumpContainer: false #If true it will add a tcpdump container inside network function pod for debugging

## For openshift you can use rhel8/support-tools:8.7-13
tcpdumpimage:
   repository: docker.io/corfr/tcpdump
   version: latest
   #pullPolicy: IfNotPresent or Never or Always
   pullPolicy: IfNotPresent

#To store PCAP of NF in a sharedVolume so it can be easily fetched (PVC is created with NRF charts so make sure in NRF it is true)
persistent:
  sharedvolume: false

## NF is the network function and tcpdump is the tcpdump container. 
## To know more about request and limit it is better to understand that how Kubernetes QoS works. 
## https://kubernetes.io/docs/concepts/configuration/manage-resources-containers
## https://kubernetes.io/docs/concepts/workloads/pods/pod-qos

resources:
  define: true
  limits:
    tcpdump:
      cpu: 400m
      memory: 384Mi
    nf:
      cpu: 400m
      memory: 384Mi
  requests:
    tcpdump:
      cpu: 400m
      memory: 384Mi
    nf:
      cpu: 400m
      memory: 384Mi
      

readinessProbe: true

livenessProbe: false

terminationGracePeriodSeconds: 5

#nodeSelector: {}

nodeName:
