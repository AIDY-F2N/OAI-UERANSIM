apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
  labels:
    {{- include "oai-lmf.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "oai-lmf.selectorLabels" . | nindent 6 }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        id: "{{ .Values.id }}" #"1" #1/2
        app_ad: "{{ .Values.app_ad }}" #"5" #Slice differentiator
        nb_pods: "{{ .Values.nb_pods }}" #"2" #number of pods in the slice
        {{- include "oai-lmf.selectorLabels" . | nindent 8 }}
    spec:
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
    {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
        {{ toYaml .Values.imagePullSecrets | indent 8 }}
    {{- end }}
    {{- if .Values.global }}{{ if .Values.global.waitForNRF }}
      initContainers:
        - name: init
          image: docker.io/oaisoftwarealliance/oai-tcpdump-init:alpine-3.20
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -c
            - until curl --connect-timeout {{ .Values.global.timeout }} --head -X GET http://oai-nrf/nnrf-nfm/v1/nf-instances?nf-type='NRF' {{ .Values.global.http2Param }}; do echo waiting for oai-nrf; sleep 1; done
          resources:
            requests:
              memory: 50Mi
              cpu: 1m
            limits:
              memory: 50Mi
              cpu: 1m
    {{- end }}{{ end }}
      containers:
    {{- if .Values.includeTcpDumpContainer }}
      - name: tcpdump
        image: "{{ .Values.tcpdumpimage.repository }}:{{ .Values.tcpdumpimage.version }}"
        imagePullPolicy: {{ .Values.tcpdumpimage.pullPolicy }}
        {{- if .Values.resources.define}}
        resources:
          requests:
            memory: {{ .Values.resources.requests.tcpdump.memory | quote }}
            cpu: {{ .Values.resources.requests.tcpdump.cpu | quote }}
          limits:
            memory: {{ .Values.resources.limits.tcpdump.memory | quote }}
            cpu: {{ .Values.resources.limits.tcpdump.cpu | quote }}
        {{- end}}
        securityContext:
           privileged: true
           capabilities:
              add:
               - NET_ADMIN
              drop:
               - ALL
        {{- if .Values.start.tcpdump}}
        command:
          - /bin/sh
          - -c
          - /usr/bin/tcpdump -i any -w /tmp/pcap/{{ .Chart.Name }}_`date +%Y-%m-%d_%H_%M-%S-%Z`.pcap
        {{- else}}
        command:
          - /bin/sleep
          - infinity
        {{- end}}
        {{- if .Values.includeTcpDumpContainer}}
        {{- if .Values.persistent.sharedvolume}}
        volumeMounts:
        - mountPath: "/tmp/pcap"
          name: cn5g-pvc
        {{- end}}
        {{- end}}
    {{- end }}
      - name: lmf
        image: "{{ .Values.nfimage.repository }}:{{ .Values.nfimage.version }}"
        volumeMounts:
          - mountPath: /openair-lmf/etc
            name: configuration
        imagePullPolicy: {{ .Values.nfimage.pullPolicy }}
        {{- if .Values.resources.define}}
        resources:
          requests:
            memory: {{ .Values.resources.requests.nf.memory | quote }}
            cpu: {{ .Values.resources.requests.nf.cpu | quote }}
          limits:
            memory: {{ .Values.resources.limits.nf.memory | quote }}
            cpu: {{ .Values.resources.limits.nf.cpu | quote }}
        {{- end}}
        {{- if .Values.readinessProbe}}
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - /openair-lmf/bin/healthcheck.sh
          initialDelaySeconds: 2
          periodSeconds: 2
        {{- end}}
        {{- if .Values.livenessProbe}}
        livenessProbe:
          exec:
            command:
            - /bin/bash
            - /openair-lmf/bin/healthcheck.sh
          initialDelaySeconds: 15
          periodSeconds: 5
        {{- end}}
        ports:
        - containerPort: {{ .Values.exposedPorts.sbi }}
          name: http
          protocol: TCP
      volumes:
      {{- if .Values.includeTcpDumpContainer}}
      {{- if .Values.persistent.sharedvolume}}
      - name: cn5g-pvc
        persistentVolumeClaim:
          claimName: cn5g-pvc
      {{- end }}
      {{- end }}
      - configMap:
      {{- if .Values.global }}
          name: {{ .Values.global.coreNetworkConfigMap }}
      {{- else }}
          name: {{ .Chart.Name }}-configmap
      {{- end }}
        name: configuration
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: "{{ .Values.schedulerName }}"
      serviceAccountName: {{ .Chart.Name }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- if .Values.nodeSelector}}
      nodeSelector: 
         {{- toYaml .Values.nodeSelector | nindent 12 }}
      {{- end }}
      {{- if .Values.nodeName}}
      nodeName: {{ .Values.nodeName }}
      {{- end }}
